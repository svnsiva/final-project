package com.bellinfo.flights.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.qpxExpress.QPXExpress;
import com.google.api.services.qpxExpress.QPXExpressRequestInitializer;
import com.google.api.services.qpxExpress.model.FlightInfo;
import com.google.api.services.qpxExpress.model.LegInfo;
import com.google.api.services.qpxExpress.model.PassengerCounts;
import com.google.api.services.qpxExpress.model.PricingInfo;
import com.google.api.services.qpxExpress.model.SegmentInfo;
import com.google.api.services.qpxExpress.model.SliceInfo;
import com.google.api.services.qpxExpress.model.SliceInput;
import com.google.api.services.qpxExpress.model.TripOption;
import com.google.api.services.qpxExpress.model.TripOptionsRequest;
import com.google.api.services.qpxExpress.model.TripsSearchRequest;
import com.google.api.services.qpxExpress.model.TripsSearchResponse;

public class FlightSearch {
	private static final String APPLICATION_NAME = "MyFlightApplication";

    private static final String API_KEY = "AIzaSyDnBCdsmTnrL5XFrO2TjJyvFioswjakNYU";

    /** Global instance of the HTTP transport. */
    private static HttpTransport httpTransport;

    /** Global instance of the JSON factory. */
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();




  public static List<FlightDetails> search(String origin1,String destination, String date) {
      // TODO Auto-generated method stub
	  List<FlightDetails> sendingData = new ArrayList<FlightDetails>();
       try {
            httpTransport = GoogleNetHttpTransport.newTrustedTransport();


            PassengerCounts passengers= new PassengerCounts();
              passengers.setAdultCount(1);

              List<SliceInput> slices = new ArrayList<SliceInput>();

              SliceInput slice = new SliceInput();
              slice.setOrigin(origin1); 
              slice.setDestination(destination); 
              slice.setDate(date);
              slices.add(slice);

              TripOptionsRequest request= new TripOptionsRequest();
              request.setSolutions(10);
              request.setPassengers(passengers);
              request.setSlice(slices);

              TripsSearchRequest parameters = new TripsSearchRequest();
              parameters.setRequest(request);
              QPXExpress qpXExpress= new QPXExpress.Builder(httpTransport, JSON_FACTORY, null).setApplicationName(APPLICATION_NAME)
                      .setGoogleClientRequestInitializer(new QPXExpressRequestInitializer(API_KEY)).build();

              TripsSearchResponse list= qpXExpress.trips().search(parameters).execute();
              List<TripOption> tripResults=list.getTrips().getTripOption();
              
              String id;

              for(int i=0; i<tripResults.size(); i++){
                  //Trip Option ID
            	  int found=0;
            	  FlightDetails fd = new FlightDetails();
                  id= tripResults.get(i).getId();
                  fd.setId(id);

                  //Slice
                  List<SliceInfo> sliceInfo= tripResults.get(i).getSlice();
                  for(int j=0; j<sliceInfo.size(); j++){
                	  
                      int duration= sliceInfo.get(j).getDuration();
                      fd.setDuration(duration);
                      List<SegmentInfo> segInfo= sliceInfo.get(j).getSegment();
                      
                      for(int k=0; k<segInfo.size(); k++){
                    	  
                          String bookingCode= segInfo.get(k).getBookingCode();
                          //System.out.println("bookingCode "+bookingCode);
                          FlightInfo flightInfo=segInfo.get(k).getFlight();
                          String flightNum= flightInfo.getNumber();
                          fd.setFlightNum(flightNum);
                          String flightCarrier= flightInfo.getCarrier();
                          fd.setAirline(flightCarrier);
                          List<LegInfo> leg=segInfo.get(k).getLeg();
                          if(leg.size()!=1)
                        	  found=1;
                          for(int l=0; l<leg.size(); l++){
                              String aircraft= leg.get(l).getAircraft();
                              
                              String arrivalTime= leg.get(l).getArrivalTime();
                              fd.setArrivalTime(arrivalTime);
                              System.out.println(arrivalTime.substring(11, 14));
                              String departTime=leg.get(l).getDepartureTime();
                              fd.setDepartTime(departTime);
                              String dest=leg.get(l).getDestination();
                              //System.out.println("Destination "+dest);
                              String destTer= leg.get(l).getDestinationTerminal();
                              fd.setArrivalTerm(destTer);
                              String origin=leg.get(l).getOrigin();
                              
                              String originTer=leg.get(l).getOriginTerminal();
                              fd.setDepartTerm(originTer);
                              int durationLeg= leg.get(l).getDuration();
                              
                              int mil= leg.get(l).getMileage();
                              fd.setDistance(mil);

                          }

                      }
                  }

                  //Pricing
                  List<PricingInfo> priceInfo= tripResults.get(i).getPricing();
                  for(int p=0; p<priceInfo.size(); p++){
                      String price= priceInfo.get(p).getSaleTotal();
                      fd.setCost(price);
                  }
                  if(found==0)
                	  sendingData.add(fd);
              }
            return sendingData;
          } catch (IOException e) {
            System.err.println(e.getMessage());
          } catch (Throwable t) {
            t.printStackTrace();
          }
          return sendingData;

  }
}
